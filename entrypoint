#!/bin/bash
set -e
export DEBIAN_FRONTEND=noninteractive

userConfFinalPath="/var/run/sftp-users.conf"

function printHelp() {
    echo "Add users as command arguments, STDIN or defind on env USERS"
    echo "Syntax: user:pass[:e][:uid[:gid[:dir]:[s3_bucket_name]"
    echo "Use --readme for more information and examples."
}


function createUser() {
    IFS=':' read -a param <<< $@
    user="${param[0]}"
    pass="${param[1]}"

    if [[ -n "$S3_BUCKET" ]]; then

        if [ "${param[2]}" == "e" ]; then
            chpasswdOptions="-e"
            uid="${param[3]}"
            gid="${param[4]}"
            dir="${param[5]}"
            S3_BUCKET_NAME="${param[6]}"
        else
            uid="${param[2]}"
            gid="${param[3]}"
            dir="${param[4]}"
            S3_BUCKET_NAME="${param[5]}"
        fi
    else
        if [ "${param[2]}" == "e" ]; then
            chpasswdOptions="-e"
            uid="${param[3]}"
            gid="${param[4]}"
            dir="${param[5]}"
        else
            uid="${param[2]}"
            gid="${param[3]}"
            dir="${param[4]}"
        fi
    fi

    if [ -z "$user" ]; then
        echo "FATAL: You must at least provide a username."
        exit 1
    fi

    if $(cat /etc/passwd | cut -d: -f1 | grep -q "^$user:"); then
        echo "WARNING: User \"$user\" already exists. Skipping."
        return 0
    fi

    useraddOptions="--no-user-group"

    if [ -n "$uid" ]; then
        useraddOptions="$useraddOptions --non-unique --uid $uid"
    fi

    if [ -n "$gid" ]; then
        if ! $(cat /etc/group | cut -d: -f3 | grep -q "$gid"); then
            groupadd --gid $gid "group_$gid"
        fi

        useraddOptions="$useraddOptions --gid $gid"
    fi

    useradd $useraddOptions $user
    mkdir -p /home/$user
    chown root:root /home/$user
    chmod 755 /home/$user

    if [ -n "$pass" ]; then
        echo "$user:$pass" | chpasswd $chpasswdOptions
    else
        usermod -p "*" $user # disabled password
    fi

    # Add SSH keys to authorized_keys with valid permissions
    if [ -d /home/$user/.ssh/keys ]; then
        cat /home/$user/.ssh/keys/* >> /home/$user/.ssh/authorized_keys
        chown $user /home/$user/.ssh/authorized_keys
        chmod 600 /home/$user/.ssh/authorized_keys
    fi

    # Make sure dirs exists and has correct permissions
    if [ -n "$dir" ]; then
        IFS=',' read -a dirParam <<< $dir
        for dirPath in ${dirParam[@]}; do
            dirFullPath=/home/$user/$dirPath
            echo "Creating and/or setting permissions on $dirPath"
            mkdir -p $dirFullPath
            chown -R $user:users $dirFullPath
            if [[ -n "$S3_BUCKET" ]]; then
                mountUserSpaceToS3
            else
                echo "DEBUG: No s3 not configure"
            fi
        done
    fi
}

function mountUserSpaceToS3(){
    echo "DEBUG: finished running s3fs"
    eval /usr/bin/s3fs $S3_BUCKET_NAME.s3:/$dirPath $dirFullPath -o iam_role=$ECS_ROLE_NAME -o url="https://ap-south-1.amazonaws.com" -o endpoint=ap-south-1 -o dbglevel=debug -o curldbg -o allow_other -o use_cache=/tmp
}

if [[ $1 =~ ^--help$|^-h$ ]]; then
    printHelp
    exit 0
fi

# Create users only on first run
if [ ! -f "$userConfFinalPath" ]; then
    
    for i in $(echo $USERS | tr ";" "\n")
    do
        echo "$i" >> "$userConfFinalPath"
    done

    # Check that we have users in config
    if [ "$(cat "$userConfFinalPath" | wc -l)" == 0 ]; then
        echo "FATAL: No users provided!"
        printHelp
        exit 3
    fi

    # Import users from final conf file
    while IFS= read -r user || [[ -n "$user" ]]; do
        createUser "$user"
    done < "$userConfFinalPath"

    if [[ -n "$SSH_KEYS" ]]; then
        echo "DEBUG: Adding ssh keys for $user"
        sentence=$SSH_KEYS
        export IFS=";"
        for user_and_key in $sentence; do
        IFS="@" read user ssh_key <<< "$user_and_key"
        echo "provision ssh-key for $user"
            if [ -d /home/$user ]; then
                mkdir -p /home/$user/.ssh
                echo $ssh_key >> /home/$user/.ssh/authorized_keys
                chown $user /home/$user/.ssh/authorized_keys
                chmod 600 /home/$user/.ssh/authorized_keys
            fi
        done
    fi

    # Generate unique ssh keys for this container, if needed
    if [ ! -f /etc/ssh/ssh_host_ed25519_key ]; then
        ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''
    fi
    if [ ! -f /etc/ssh/ssh_host_rsa_key ]; then
        ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ''
    fi
fi

# Source custom scripts, if any
if [ -d /etc/sftp.d ]; then
    for f in /etc/sftp.d/*; do
        if [ -x "$f" ]; then
            echo "Running $f ..."
            $f
        fi
    done
    unset f
fi

exec /usr/sbin/sshd -D -e -g 240
